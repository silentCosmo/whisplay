import { create } from "zustand";
import { persist } from "zustand/middleware";

function shuffleArray(arr) {
  const copy = [...arr];
  for (let i = copy.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [copy[i], copy[j]] = [copy[j], copy[i]];
  }
  return copy;
}

const useSongStore = create(
  persist(
    (set, get) => ({
      songs: [],
      shuffledSongs: [],
      currentSong: null,
      currentIndex: -1,
      shuffle: false,
      repeat: "all", // "all", "one", "none"

      setSongs: (songs) => {
        console.log("ðŸŽ¯ setSongs called! First song:", songs?.[0]);
        set({
          songs,
          shuffledSongs: [],
        });
      },

      setShuffle: (val) => {
        const { songs } = get();
        set({
          shuffle: val,
          shuffledSongs: val ? shuffleArray(songs) : [],
        });
      },

      toggleShuffle: () => {
        const { shuffle, songs } = get();
        if (!shuffle) {
          // Turning shuffle ON
          set({
            shuffle: true,
            shuffledSongs: shuffleArray(songs),
          });
        } else {
          // Turning shuffle OFF
          set({
            shuffle: false,
            shuffledSongs: [],
          });
        }
      },

      /* toggleShuffle: () => {
        const { shuffle, songs } = get();
        set({
          shuffle: !shuffle,
          shuffledSongs: !shuffle ? shuffleArray(songs) : [],
        });
      }, */

      setRepeat: (mode) => set({ repeat: mode }),
      toggleRepeat: () =>
        set((s) => {
          const next = { all: "one", one: "none", none: "all" };
          return { repeat: next[s.repeat] };
        }),

      setCurrentSong: (song) => {
        const list = get().shuffle ? get().shuffledSongs : get().songs;
        const index = list.findIndex((s) => s.id === song.id);
        set({ currentSong: song, currentIndex: index });
      },

      getShuffledSongs: () => get().shuffledSongs,

      playNext: () => {
        const {
          songs,
          shuffledSongs,
          currentIndex,
          shuffle,
          repeat,
          setCurrentSong,
          currentSong,
        } = get();

        // If shuffle is enabled, use the shuffledSongs list and play the next song in order
        if (shuffle) {
          let nextIndex = currentIndex + 1;

          // If we reached the end of the shuffled list, handle repeat or stop
          if (nextIndex >= shuffledSongs.length) {
            if (repeat === "all") {
              nextIndex = 0;
            } else {
              return; // No repeat, stop at end
            }
          }

          const nextSong = shuffledSongs[nextIndex];
          set({ currentIndex: nextIndex, currentSong: nextSong });
          setCurrentSong(nextSong);
          set({
            currentTime: 0,
            progress: 0,
            duration: 0,
          });
        } else {
          // If shuffle is not enabled, follow the regular order from the songs list
          let nextIndex = currentIndex + 1;

          if (nextIndex >= songs.length) {
            if (repeat === "all") {
              nextIndex = 0;
            } else {
              return; // No repeat, stop at end
            }
          }

          const nextSong = songs[nextIndex];

          // Prewarm the next song for better performance
          fetch(`/api/song?id=${nextSong.id}`, { method: "HEAD" }).catch(
            (err) => console.warn("Prewarm failed:", err)
          );

          set({ currentIndex: nextIndex, currentSong: nextSong });
          setCurrentSong(nextSong);
          set({
            currentTime: 0,
            progress: 0,
            duration: 0,
          });
        }
      },

      playPrevious: () => {
        const { songs, shuffledSongs, currentIndex, shuffle, setCurrentSong } =
          get();

        const list = shuffle ? shuffledSongs : songs;
        let prevIndex = currentIndex - 1;

        if (prevIndex < 0) {
          prevIndex = list.length - 1;
        }

        set({ currentIndex: prevIndex, currentSong: list[prevIndex] });
        set({
          currentTime: 0,
          progress: 0,
          duration: 0,
        });
      },

      /* audioElement: null,
      setAudioElement: (el) => set({ audioElement: el }), */

      setPlaying: (isPlaying) => set({ playing: isPlaying }),

      audioRef: null,
      //setAudioRef: (ref) => set({ audioRef: ref }),
      setAudioRef: (ref) => {
        const volume = get().volume;
        console.log("ðŸ§ª Setting audioRef with volume:", volume);
        if (ref) ref.volume = volume;
        set({ audioRef: ref });
      },

      duration: 0,
      setDuration: (val) => set({ duration: val }),

      playing: false,
      setPlaying: (val) => set({ playing: val }),

      progress: 0,
      setProgress: (val) => set({ progress: val }),

      volume: 1,
      setVolume: (val) => {
        const ref = get().audioRef;
        if (ref) ref.volume = val;
        set({ volume: val });
      },

      currentTime: 0,
      setCurrentTime: (t) => set({ currentTime: t }),

      togglePlay: () => {
        const { audioRef, playing, setPlaying } = get();
        if (!audioRef) return;
        if (playing) {
          audioRef.pause();
          setPlaying(false);
        } else {
          audioRef.play();
          setPlaying(true);
        }
      },

      seekTo: (time) => {
        const { audioRef } = get();
        if (audioRef) audioRef.currentTime = time;
      },
    }),
    {
      name: "song-store",
      partialize: (state) => ({
        // include only safe stuff in localStorage
        songs: state.songs,
        shuffledSongs: state.shuffledSongs,
        currentSong: state.currentSong,
        currentIndex: state.currentIndex,
        shuffle: state.shuffle,
        repeat: state.repeat,
        playing: state.playing,
        volume: state.volume,
      }),
    }
  )
);

export default useSongStore;
